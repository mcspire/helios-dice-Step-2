generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String
  displayName String
  avatarUrl   String?
  theme       String   @default("dark")
  roles       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sessions    Session[] @relation("SessionOwner")
  participants Participant[]
  characters  Character[]
  dicePresets DicePreset[]
  rollLog     RollLog[]
  chatMessages ChatMessage[] @relation("UserMessages")
  auditLogs   AuditLog[] @relation("AuditActor")
}

model Session {
  id             String       @id @default(uuid())
  owner          User         @relation("SessionOwner", fields: [ownerId], references: [id])
  ownerId        String
  name           String
  description    String?
  status         String
  modulesEnabled String[]
  createdAt      DateTime     @default(now())
  archivedAt     DateTime?
  participants   Participant[]
  rollLog        RollLog[]
  mapState       MapState?
  characters     Character[]
  dicePresets    DicePreset[]
  chatMessages   ChatMessage[]
}

model Participant {
  id          String   @id @default(uuid())
  session     Session  @relation(fields: [sessionId], references: [id])
  sessionId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  role        String
  joinedAt    DateTime @default(now())
  lastSeenAt  DateTime?

  @@unique([sessionId, userId])
}

model RollLog {
  id            String   @id @default(uuid())
  session       Session  @relation(fields: [sessionId], references: [id])
  sessionId     String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  results       Json
  successes     Int
  crit          Boolean
  panic         Boolean
  rerollChainId String?
  createdAt     DateTime @default(now())
  comment       String?
}

model MapState {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String   @unique
  stateJson Json
  updatedAt DateTime @updatedAt
}

model Character {
  id             String   @id @default(uuid())
  session        Session  @relation(fields: [sessionId], references: [id])
  sessionId      String
  owner          User     @relation(fields: [ownerId], references: [id])
  ownerId        String
  name           String
  role           String
  attributesJson Json
  inventoryJson  Json
  status         String
  updatedAt      DateTime @updatedAt
}

model DicePreset {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pool      Json
  advantage Boolean  @default(false)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, userId, comment])
}

model ChatMessage {
  id         String   @id @default(uuid())
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  String
  sender     User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId   String
  channel    String
  content    String
  visibility String
  createdAt  DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  actor     User     @relation("AuditActor", fields: [actorId], references: [id])
  actorId   String
  action    String
  payload   Json
  createdAt DateTime @default(now())
}
